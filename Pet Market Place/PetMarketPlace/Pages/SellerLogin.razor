@page "/SellerLogin"
@inject NavigationManager NavigationManager
@inject ISellerInterface sellerRepo
@inject IJSRuntime JsRuntime

<div class="container mt-5">
    <h2 class="text-center mb-4">Login as Seller</h2>
    @if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    <EditForm Model="@seller" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="Username">Username</label>
            <InputText id="Username" class="form-control" @bind-Value="seller.Username" required />
        </div>
        <div class="form-group mb-3">
            <label for="Password">Password</label>
            <InputText id="Password" type="password" class="form-control" @bind-Value="seller.Password" required />
        </div>
        <button type="submit" class="btn btn-primary w-100">Login</button>
    </EditForm>
    <p class="mt-3 text-center">Don't have an account? <a href="/SellerSignup">Sign up</a></p>
</div>

@code {
    private SellerEntity seller = new SellerEntity();
    private string? error;

    private async Task HandleLogin()
    {
        var sellerEntity = sellerRepo.Login(seller.Username,seller.Password);
        if(sellerEntity.Item1 != null)
        {
            await SaveAuthToken(sellerEntity.Item1.UserId.ToString());
            NavigationManager.NavigateTo("/SelectOptions");
        }
        else
            error = "Invalid username or password.";
    }
    public async Task SaveAuthToken(string userId)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "SellerId", userId);
    }
}
