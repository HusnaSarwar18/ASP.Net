@page "/SellerSignup"
@inject ISellerInterface sellerRepo
@inject NavigationManager manager
@inject IJSRuntime JsRuntime

<div class="container mt-5">
    <h2 class="text-center mb-4">Sign Up as Seller</h2>
    @if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    <EditForm Model="@seller" OnValidSubmit="@HandleSignUp">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="seller.Username" required></InputText>
        </div>
        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="seller.Password" required></InputText>
        </div>
        <div class="form-group mb-3">
            <label for="businessName">Business Name</label>
            <InputText id="businessName" class="form-control" @bind-Value="seller.BusinessName"></InputText>
        </div>
        <div class="form-group mb-3">
            <label for="businessAddress">Business Address</label>
            <InputText id="businessAddress" class="form-control" @bind-Value="seller.BusinessAddress"></InputText>
        </div>
        <div class="form-group mb-3">
            <label for="contactNumber">Contact Number</label>
            <InputText id="contactNumber" class="form-control" @bind-Value="seller.ContactNumber"></InputText>
        </div>
        <div class="form-group mb-3">
            <label for="website">Website</label>
            <InputText id="website" class="form-control" @bind-Value="seller.Website"></InputText>
        </div>
        <button type="submit" class="btn btn-primary w-100">Sign Up</button>
    </EditForm>
    <p class="mt-3 text-center">Already have an account? <a href="/SellerLogin">Login</a></p>
</div>

@code {
    private SellerEntity seller = new SellerEntity();
    private string? error;

    private async Task HandleSignUp()
    {
        if (seller.Username == null) 
        {
            error = "Please enter a valid username.";
        }
        else
        {
            SellerEntity s = sellerRepo.Signup(seller);
            if(s != null)
            {
                await SaveAuthToken(s.UserId.ToString());
                manager.NavigateTo("/SelectOptions");
            }
        }
    }
    public async Task SaveAuthToken(string userId)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "SellerId", userId);
    }
}
