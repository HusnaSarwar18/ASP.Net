@page "/BuyerSignup"
@inject NavigationManager manager
@inject IBuyerInterface buyerRepo
@inject IJSRuntime JsRuntime

<div class="container mt-5">
    <h2 class="text-center mb-4">Sign Up as Buyer</h2>
    @if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    <EditForm Model="@buyer" OnValidSubmit="@HandleSignUp">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="buyer.Username" required />
        </div>
        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="buyer.Password" required />
        </div>
        <div class="form-group mb-3">
            <label for="fullName">Full Name</label>
            <InputText id="fullName" class="form-control" @bind-Value="buyer.FullName" required />
        </div>
        <div class="form-group mb-3">
            <label for="email">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="buyer.Email" required />
        </div>
        <div class="form-group mb-3">
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="buyer.PhoneNumber" required />
        </div>
        <button type="submit" class="btn btn-primary w-100">Sign Up</button>
    </EditForm>
    <p class="mt-3 text-center">Already have an account? <a href="/BuyerLogin">Login</a></p>
</div>

@code {
    BuyerEntity buyer = new BuyerEntity();
    string? error;

    private async Task HandleSignUp()
    {
        BuyerEntity b = buyerRepo.Signup(buyer);
        if (b != null)
        {
            await SaveAuthToken(b.UserId.ToString());
            manager.NavigateTo("/AllPets");
        }
        else
            error = "Incorrect credentials";
    }
    public async Task SaveAuthToken(string userId)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "BuyerId", userId);
    }
}
